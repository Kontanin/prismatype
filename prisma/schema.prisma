generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid())
  email       String
  password    String
  role        String
  isActive    Boolean
  firstname   String
  lastname    String
  address     String?
  subdistrict String?
  country     String?
  zipcode     Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  orders      Order[] // A user can have multiple orders
  blob        Blob[]
  feedbacks   Feedback[]
  messages    Message[] // A user can have multiple messages
}

model Blob {
  id        String   @id @default(uuid())
  title     String   @unique
  tag       String?
  content   String
  isActive  Boolean
  userId    String // Reference to the User's ID
  username  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
}

model Product {
  id           String      @id @default(uuid())
  productName  String      @unique
  isActive     Boolean
  description  String?
  stock        Int?
  unitPrice    Int?
  image        String?     @default("\\images\\default.jpg")
  freeShipping Boolean?
  company      String?
  category     String?
  tag          String? // Add tag field for filtering or categorizing
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  orderItems   OrderItem[] // A product can be included in multiple order items
  promotions   Promotion[]
}

model Order {
  id              String      @id @default(uuid())
  isActive        Boolean
  shippingFee     Boolean?
  total           Int
  paymentIntentId String?
  status          String
  timestamps      DateTime
  tax             Int
  userId          String // Each order belongs to one user
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id])
  orderItems      OrderItem[] // An order can have multiple order items
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  unitPrice Int
  isActive  Boolean
  productId String // Each order item belongs to one product
  orderId   String // Each order item belongs to one order
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Feedback {
  id        String   @id @default(uuid())
  title     String
  content   String
  isActive  Boolean
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Promotion {
  id         String     @id @default(uuid())
  name       String
  type       String
  percentage Int?
  startDate  DateTime
  endDate    DateTime
  products   Product[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}
