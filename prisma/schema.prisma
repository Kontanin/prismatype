generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String
  password     String
  role         String
  isActive     Boolean        @default(true)
  firstname    String
  lastname     String
  address      String?
  subdistrict  String?
  country      String?
  zipcode      Int?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  orders       Order[] // A user can have multiple orders
  blob         Blob[]
  feedbacks    Feedback[]
  messagesSent Message[]      @relation("SentMessages")
  createId     Conversation[] @relation("CreateMessage")
}

model Blob {
  id        String   @id @default(uuid())
  title     String   @unique
  tag       String?
  content   String
  isActive  Boolean  @default(true)
  userId    String // Reference to the User's ID
  username  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
}

model Product {
  id           String      @id @default(uuid())
  productName  String      @unique
  isActive     Boolean     @default(true)
  description  String?
  stock        Int?
  unitPrice    Int?
  image        String?     @default("\\images\\default.jpg")
  freeShipping Boolean?
  company      String?
  category     String?
  tag          String? // Add tag field for filtering or categorizing
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  orderItems   OrderItem[] // A product can be included in multiple order items
  promotions   Promotion[]
}

model Order {
  id              String      @id @default(uuid())
  isActive        Boolean     @default(true)
  shippingFee     Boolean?
  total           Int
  paymentIntentId String?
  status          String
  timestamps      DateTime
  tax             Int
  userId          String // Each order belongs to one user
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id])
  orderItems      OrderItem[] // An order can have multiple order items
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  unitPrice Int
  isActive  Boolean  @default(true)
  productId String // Each order item belongs to one product
  orderId   String // Each order item belongs to one order
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Feedback {
  id        String   @id @default(uuid())
  title     String
  content   String
  isActive  Boolean  @default(true)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Message {
  id           Int           @id @default(autoincrement())
  content      String
  createdAt    DateTime      @default(now())
  senderId     String
  isRead       Boolean       @default(false)
  conId        String
  isActive     Boolean       @default(true)
  User         User          @relation(fields: [senderId], references: [id], name: "SentMessages")
  Conversation Conversation? @relation(fields: [conId], references: [id])
}

model Promotion {
  id         String    @id @default(uuid())
  name       String
  type       String
  percentage Int?
  startDate  DateTime
  endDate    DateTime
  products   Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isActive   Boolean   @default(true)
}

model Conversation {
  id         String    @id @default(uuid())
  isActive   Boolean   @default(true)
  createDate DateTime  @default(now())
  UserId     String    @unique
  sender     User      @relation(fields: [UserId], references: [id], name: "CreateMessage")
  Message    Message[]
}
